
Some notes regarding Part 1

---

Comics kubernetes at https://cloud.google.com/kubernetes-engine/kubernetes-comic/

gcloud container clusters create myCluster
kubectl run app --image gcr.io/google-samples/hello-app:1.0
kubectl scale deployment app --replicas 3
kubectl expose deployment app --port 80 --type=LoadBalancer
kubectl get service app
curl http://192.0.2.163:80
kubectl set image deployment app app=gcr.io/google-samples/hello-app:2.0
curl http://192.0.2.163:80

---

Part 1 => Kubernetes cluster with k3d

k3d cluster create -a 2
another terminal > docker ps

---
k3d kubeconfig get k3s-default
---

kubectl

kubectl config use-context k3d-k3s-default

kubectl cluster-info

k3d cluster stop

k3d cluster start

k3d cluster delete

---

First Deploy

docker run jakousa/dwk-app1



k3d
use local images > k3d image import <image-name>

Deployment

kubectl create deployment hashgenerator-dep --image=jakousa/dwk-app1 
deployment.apps/hashgenerator-dep created

 
kubectl describe deployments


kubectl explain pod

kubectl get pods

=>hashgenerator-dep-69b6cd776-6cm9c

---
What is a Deployment resource

kubectl get deployments

kubectl logs -f hashgenerator-dep-69b6cd776-4j4l8

...

---
scaling

kubectl scale deployment/hashgenerator-dep --replicas=4
kubectl set image deployment/hashgenerator-dep dwk-app1=jakousa/dwk-app1:b7fc18de2376da80ff0cfc72cf581a9f94d10e64


kubectl delete deployment hashgenerator-dep
deployment.apps "hashgenerator-dep" deleted

---
yaml file

cd ... ex1.00

kubectl apply -f manifests/deployment.yaml
    deployment.apps/hashgenerator-dep created

kubectl delete -f manifests/deployment.yaml
    deployment.apps "hashgenerator-dep" deleted

kubectl apply -f https://raw.githubusercontent.com/kubernetes-hy/material-example/master/app1/manifests/deployment.yaml
    deployment.apps/hashgenerator-dep created

---

$ docker build -t <image>:<new_tag>
$ docker push <image>:<new_tag>

$ kubectl apply -f manifests/deployment.yaml


---
debugging

kubectl describe
kubectl logs
kubectl delete

---

#2Debugging
kubectl apply -f https://raw.githubusercontent.com/kubernetes-hy/material-example/master/app1/manifests/deployment.yaml
  =>deployment.apps/hashgenerator-dep created

kubectl describe deployment hashgenerator-dep

kubectl describe pod hashgenerator-dep-7c5cfb9744-php2x
=> watch for events

kubectl logs hashgenerator-dep-7c5cfb9744-php2x
jst944

Lens ID
---

#3Networking

kubectl apply -f https://raw.githubusercontent.com/kubernetes-hy/material-example/master/app2/manifests/deployment.yaml
    =>deployment.apps/hashresponse-dep created

P:3000

kubectl get po
    =>hashresponse-dep-755b5b5dd7-ggxxq

kubectl port-forward hashresponse-dep-755b5b5dd7-ggxxq 3003:3000
  =>Forwarding from 127.0.0.1:3003 -> 3000
  =>Forwarding from [::1]:3003 -> 3000

---
after ex1.05
We're going to use either a Service resource or an Ingress resourse

K3d documentation tells us how the ports are opened, we'll open local 
8081 to 80 in k3d-k3s-default-serverlb
local 8082 to 30080 in k3d-k3s-default-agent-0. 
The 30080 is chosen almost completely randomly, but needs to be a value between 30000-32767 for the next step:

k3d cluster delete

k3d cluster create --port 8082:30080@agent:0 -p 8081:80@loadbalancer --agents 2

kubectl apply -f https://raw.githubusercontent.com/kubernetes-hy/material-example/master/app2/manifests/deployment.yaml
  deployment.apps/hashresponse-dep created

---

Create a file service.yaml into the manifests folder and we need 
the service to do the following things:

Declare that we want a Service
Declare which port to listen to
Declare the application where the request should be directed to
Declare the port where the request should be directed to
This translates into a yaml file with contents

k3d cluster create --port 8082:30080@agent:0 -p 8081:80@loadbalancer --agents 2

#example of service.yaml

apiVersion: v1
kind: Service
metadata:
  name: hashresponse-svc
spec:
  type: NodePort
  selector:
    app: hashresponse # This is the app as declared in the deployment.
  ports:
    - name: http
      nodePort: 30080 # This is the port that is available outside. Value for nodePort can be between 30000-32767
      protocol: TCP
      port: 1234 # This is a port that is available to the cluster, in this case it can be ~ anything
      targetPort: 3000 # This is the target port


$ kubectl apply -f manifests/service.yaml
  service/hashresponse-svc created

access
=> http://localhost:8082

---

service.yaml =>

apiVersion: v1
kind: Service
metadata:
  name: hashresponse-svc
spec:
  type: ClusterIP
  selector:
    app: hashresponse
  ports:
    - port: 2345
      protocol: TCP
      targetPort: 3000

ingress.yaml =>

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dwk-material-ingress
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hashresponse-svc
            port:
              number: 2345


kubectl apply -f manifests/

kubectl get svc,ing
ingress.networking.k8s.io/dwk-material-ingress   <none>   *       172.21.0.3,172.21.0.4,172.21.0.5   80      16s

We can see that the ingress is listening on port 80. 
As we already opened port there we can access the 
application on http://localhost:8081.

---

4. Introduction to Storage

video -> to check out
https://www.youtube.com/watch?v=GgCA2USI5iQ

article -> check out
https://softwareengineeringdaily.com/2019/01/11/why-is-storage-on-kubernetes-is-so-hard/



